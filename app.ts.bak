import { BotFramework } from './src/core/bot-framework';
import { Logger, LogLevel } from './src/config/log';
import { ConfigInitializer } from './src/config/init';
import { RedisDatabase } from './src/config/readis';
import { DatabaseManager } from './src/database/database-manager';

async function main() {
  try {
    Logger.setLogLevel(LogLevel.INFO);
    
    // 初始化配置
    const configInit = ConfigInitializer.getInstance();
    await configInit.initialize();
    
    // 获取框架实例
    const framework = BotFramework.getInstance();

    const botConfig = configInit.getConfig('bot');
    if (botConfig && botConfig.database && botConfig.database.type === 'redis') {
      const redisDb = new RedisDatabase({
        host: botConfig.database.redis.host,
        port: botConfig.database.redis.port,
        password: botConfig.database.redis.password,
        db: botConfig.database.redis.db
      });
      DatabaseManager.getInstance().setDatabase(redisDb);
    }
    
    // 启动框架（将自动加载适配器和插件）
    await framework.start();
    
    if (!botConfig?.plugins?.autoLoad) {

      try {
    //    const ExamplePlugin = (await import('./plugins/example-plugin/index')).default;
     //   const examplePlugin = new ExamplePlugin();
        await framework.loadPlugin(examplePlugin);
        Logger.info('示例插件加载成功');
        
        // 加载系统插件
        const SystemPlugin = (await import('./plugins/system-plugin/index')).default;
        const systemPlugin = new SystemPlugin();
        await framework.loadPlugin(systemPlugin);
        Logger.info('系统插件加载成功');
      } catch (error) {
        Logger.error('插件加载失败:', error);
      }
    }
   
    // 显示框架状态
    const status = framework.getStatus();
    Logger.info(`📊 框架状态: 运行=${status.isRunning}, 插件数=${status.pluginCount}, 适配器数=${status.adapterCount}`);
    
    // 监听进程退出
    process.on('SIGINT', async () => {
      Logger.info('🛑 正在关闭高级机器人框架...');
      await framework.stop();
      process.exit(0);
    });
    
    process.on('uncaughtException', (error) => {
      Logger.error('🚨 未捕获的异常:', error);
    });
    
    process.on('unhandledRejection', (reason, promise) => {
      Logger.error(`🚨 未处理的Promise拒绝 at: ${promise}, reason: ${reason}`);
    });
    
  } catch (error) {
    Logger.error('❌ 高级机器人框架启动失败:', error);
    process.exit(1);
  }
}

main();